#include <iostream>
#include <bits/stdc++.h>

using namespace std;

int z,o;
int color[200];
vector <vector<int> > adj;

bool isP(int s)
{
    queue <int> q;
    q.push(s); color[s]=0;

    bool p=1;
    while(!q.empty() && p)
    {
        int u=q.front(); q.pop();

        if(color[u]==0) z++;
        else o++;

        for(int i = 0 ; i < (int)adj[u].size() ; i++)
        {
            int child=adj[u][i];
            if(color[child]==-1)
            {
                color[child]=1-color[u];
                q.push(child);
            }
            else if(color[child]==color[u])
            {
                p=0;
                break;
            }
        }
    }

    return p;
}

int main()
{
    int T,v,e,f,t; cin >> T;
    while(T--)
    {
        cin >> v >> e;
        adj=vector <vector<int> >(v);
        for(int i = 0 ; i < e ; i++)
        {
            cin >> f >> t;
            adj[f].push_back(t);
            adj[t].push_back(f);
        }

        memset(color,-1,sizeof(color));


        int m=0;
        for(int i = 0 ; i < v ; i++)
        {
            if(color[i]==-1)
            {
                z=0; o=0;
                if(isP(i))
                {
                    if(z+o==1) m+=max(o,z);
                    else m+=min(o,z);
                }
                else
                {
                    m=-1;
                    break;
                }
            }
        }
        cout << m << "\n";
    }
    return 0;
}
